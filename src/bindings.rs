// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
pub type CompletionRequest = promptrs::core::types::CompletionRequest;
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_completion_cabi<T: Guest>(
    arg0: i32,
    arg1: *mut u8,
    arg2: usize,
    arg3: *mut u8,
    arg4: usize,
    arg5: *mut u8,
    arg6: usize,
    arg7: i32,
    arg8: f64,
    arg9: i32,
    arg10: f64,
    arg11: *mut u8,
    arg12: usize,
    arg13: i32,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len1 = arg4;
    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
    let len2 = arg6;
    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
    let base26 = arg11;
    let len26 = arg12;
    let mut result26 = _rt::Vec::with_capacity(len26);
    for i in 0..len26 {
        let base = base26.add(i * (5 * ::core::mem::size_of::<*const u8>()));
        let e26 = {
            let l3 = i32::from(*base.add(0).cast::<u8>());
            use promptrs::core::types::Message as V25;
            let v25 = match l3 {
                0 => {
                    let e25 = {
                        let l4 = *base
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l5 = *base
                            .add(2 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len6 = l5;
                        let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                        _rt::string_lift(bytes6)
                    };
                    V25::System(e25)
                }
                1 => {
                    let e25 = {
                        let l7 = *base
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l8 = *base
                            .add(2 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len9 = l8;
                        let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                        _rt::string_lift(bytes9)
                    };
                    V25::User(e25)
                }
                2 => {
                    let e25 = {
                        let l10 = *base
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l11 = *base
                            .add(2 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len12 = l11;
                        let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);
                        _rt::string_lift(bytes12)
                    };
                    V25::Assistant(e25)
                }
                3 => {
                    let e25 = {
                        let l13 = *base
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l14 = *base
                            .add(2 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len15 = l14;
                        let bytes15 = _rt::Vec::from_raw_parts(l13.cast(), len15, len15);
                        let l16 = *base
                            .add(3 * ::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l17 = *base
                            .add(4 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len18 = l17;
                        let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);
                        (_rt::string_lift(bytes15), _rt::string_lift(bytes18))
                    };
                    V25::ToolCall(e25)
                }
                n => {
                    debug_assert_eq!(n, 4, "invalid enum discriminant");
                    let e25 = {
                        let l19 = *base
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l20 = *base
                            .add(2 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len21 = l20;
                        let bytes21 = _rt::Vec::from_raw_parts(l19.cast(), len21, len21);
                        let l22 = *base
                            .add(3 * ::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l23 = *base
                            .add(4 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len24 = l23;
                        let bytes24 = _rt::Vec::from_raw_parts(l22.cast(), len24, len24);
                        (_rt::string_lift(bytes21), _rt::string_lift(bytes24))
                    };
                    V25::Status(e25)
                }
            };
            v25
        };
        result26.push(e26);
    }
    _rt::cabi_dealloc(
        base26,
        len26 * (5 * ::core::mem::size_of::<*const u8>()),
        ::core::mem::size_of::<*const u8>(),
    );
    let result27 = T::completion(promptrs::core::types::CompletionRequest {
        api_key: match arg0 {
            0 => None,
            1 => {
                let e = {
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    _rt::string_lift(bytes0)
                };
                Some(e)
            }
            _ => _rt::invalid_enum_discriminant(),
        },
        base_url: _rt::string_lift(bytes1),
        body: promptrs::core::types::CompletionParams {
            model: _rt::string_lift(bytes2),
            temperature: match arg7 {
                0 => None,
                1 => {
                    let e = arg8;
                    Some(e)
                }
                _ => _rt::invalid_enum_discriminant(),
            },
            top_p: match arg9 {
                0 => None,
                1 => {
                    let e = arg10;
                    Some(e)
                }
                _ => _rt::invalid_enum_discriminant(),
            },
            messages: result26,
            stream: _rt::bool_lift(arg13 as u8),
        },
    });
    let ptr28 = (&raw mut _RET_AREA.0).cast::<u8>();
    match result27 {
        Ok(e) => {
            *ptr28.add(0).cast::<u8>() = (0i32) as u8;
            let vec29 = (e.into_bytes()).into_boxed_slice();
            let ptr29 = vec29.as_ptr().cast::<u8>();
            let len29 = vec29.len();
            ::core::mem::forget(vec29);
            *ptr28.add(2 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len29;
            *ptr28.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr29
                .cast_mut();
        }
        Err(e) => {
            *ptr28.add(0).cast::<u8>() = (1i32) as u8;
            let vec30 = (e.into_bytes()).into_boxed_slice();
            let ptr30 = vec30.as_ptr().cast::<u8>();
            let len30 = vec30.len();
            ::core::mem::forget(vec30);
            *ptr28.add(2 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len30;
            *ptr28.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr30
                .cast_mut();
        }
    };
    ptr28
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_completion<T: Guest>(arg0: *mut u8) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
        0 => {
            let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
            let l2 = *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l1, l2, 1);
        }
        _ => {
            let l3 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
            let l4 = *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l3, l4, 1);
        }
    }
}
pub trait Guest {
    fn completion(payload: CompletionRequest) -> Result<_rt::String, _rt::String>;
}
#[doc(hidden)]
macro_rules! __export_world_client_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "completion")] unsafe extern "C" fn
        export_completion(arg0 : i32, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8,
        arg4 : usize, arg5 : * mut u8, arg6 : usize, arg7 : i32, arg8 : f64, arg9 : i32,
        arg10 : f64, arg11 : * mut u8, arg12 : usize, arg13 : i32,) -> * mut u8 { unsafe
        { $($path_to_types)*:: _export_completion_cabi::<$ty > (arg0, arg1, arg2, arg3,
        arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) } } #[unsafe
        (export_name = "cabi_post_completion")] unsafe extern "C" fn
        _post_return_completion(arg0 : * mut u8,) { unsafe { $($path_to_types)*::
        __post_return_completion::<$ty > (arg0) } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_client_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 3 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea(
    [::core::mem::MaybeUninit::uninit(); 3 * ::core::mem::size_of::<*const u8>()],
);
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod promptrs {
    pub mod core {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum Message {
                System(_rt::String),
                User(_rt::String),
                Assistant(_rt::String),
                ToolCall((_rt::String, _rt::String)),
                Status((_rt::String, _rt::String)),
            }
            impl ::core::fmt::Debug for Message {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Message::System(e) => {
                            f.debug_tuple("Message::System").field(e).finish()
                        }
                        Message::User(e) => {
                            f.debug_tuple("Message::User").field(e).finish()
                        }
                        Message::Assistant(e) => {
                            f.debug_tuple("Message::Assistant").field(e).finish()
                        }
                        Message::ToolCall(e) => {
                            f.debug_tuple("Message::ToolCall").field(e).finish()
                        }
                        Message::Status(e) => {
                            f.debug_tuple("Message::Status").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct CompletionParams {
                pub model: _rt::String,
                pub temperature: Option<f64>,
                pub top_p: Option<f64>,
                pub messages: _rt::Vec<Message>,
                pub stream: bool,
            }
            impl ::core::fmt::Debug for CompletionParams {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompletionParams")
                        .field("model", &self.model)
                        .field("temperature", &self.temperature)
                        .field("top-p", &self.top_p)
                        .field("messages", &self.messages)
                        .field("stream", &self.stream)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CompletionRequest {
                pub api_key: Option<_rt::String>,
                pub base_url: _rt::String,
                pub body: CompletionParams,
            }
            impl ::core::fmt::Debug for CompletionRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompletionRequest")
                        .field("api-key", &self.api_key)
                        .field("base-url", &self.base_url)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Property {
                pub type_: _rt::String,
                pub description: _rt::String,
            }
            impl ::core::fmt::Debug for Property {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Property")
                        .field("type", &self.type_)
                        .field("description", &self.description)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Argument {
                pub description: _rt::String,
                pub properties: _rt::Vec<(_rt::String, Property)>,
            }
            impl ::core::fmt::Debug for Argument {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Argument")
                        .field("description", &self.description)
                        .field("properties", &self.properties)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Tool {
                pub name: _rt::String,
                pub arguments: _rt::Vec<Argument>,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_client_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_client_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_client_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:promptrs:core@0.1.0:client:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 603] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xde\x03\x01A\x02\x01\
A\x07\x01B\x13\x01o\x02ss\x01q\x05\x06system\x01s\0\x04user\x01s\0\x09assistant\x01\
s\0\x09tool-call\x01\0\0\x06status\x01\0\0\x04\0\x07message\x03\0\x01\x01ku\x01p\
\x02\x01r\x05\x05models\x0btemperature\x03\x05top-p\x03\x08messages\x04\x06strea\
m\x7f\x04\0\x11completion-params\x03\0\x05\x01ks\x01r\x03\x07api-key\x07\x08base\
-urls\x04body\x06\x04\0\x12completion-request\x03\0\x08\x01r\x02\x04types\x0bdes\
criptions\x04\0\x08property\x03\0\x0a\x01o\x02s\x0b\x01p\x0c\x01r\x02\x0bdescrip\
tions\x0aproperties\x0d\x04\0\x08argument\x03\0\x0e\x01p\x0f\x01r\x02\x04names\x09\
arguments\x10\x04\0\x04tool\x03\0\x11\x03\0\x19promptrs:core/types@0.1.0\x05\0\x02\
\x03\0\0\x12completion-request\x03\0\x12completion-request\x03\0\x01\x01j\x01s\x01\
s\x01@\x01\x07payload\x02\0\x03\x04\0\x0acompletion\x01\x04\x04\0\x1apromptrs:co\
re/client@0.1.0\x04\0\x0b\x0c\x01\0\x06client\x03\0\0\0G\x09producers\x01\x0cpro\
cessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
